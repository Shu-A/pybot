#!/usr/bin/env python
# -*- coding:utf-8 -*-

import os, sys
import signal
import optparse
import json

local_module_path = os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..', 'src')
)
sys.path.append(local_module_path)

from pybot.robot import Robot
from pybot.brain import Brain

def main():

    parser = optparse.OptionParser()

    parser.add_option(
        '-a', '--adapter',
        action = 'store',
        default = os.environ.get('HUBOT_ADAPTER') or 'shell',
        dest = 'adapter',
        help = 'The Adapter to use'
    )

    def on_create(option, opt_strings, values, parser):
        parser.values.create = True
        parser.values.path = values

    parser.add_option(
        '-c', '--create',
        action = 'callback',
        default = os.environ.get('HUBOT_PATH') or '.',
        callback = on_create,
        type = 'string',
        dest = 'path',
        help = 'Creaete a deployable hubot'
    )

    parser.add_option(
        '-d', '--disable-httpd',
        action = 'store_false',
        default = os.environ.get('HUBOT_HTTPD') or True,
        dest = 'enabledHttpd',
        help = 'Disable the HTTP server'
    )

    parser.add_option(
        '-l', '--alias',
        action = 'store',
        default = os.environ.get('HUBOT_ALIAS') or False,
        dest = 'alias',
        help = 'Enable replacing the robot\'s name with alias'
    )

    parser.add_option(
        '-n', '--name',
        action = 'store',
        default = os.environ.get('HUBOT_NAME') or 'Hubot',
        dest = 'name',
        help = 'The name of the robot in chat'
    )

    parser.add_option(
        '-r', '--require',
        action = 'append',
        dest = 'scripts',
        default = os.environ.get('HUBOT_SCRIPTS') or [],
        help = 'Alternative scripts path'
    )

    parser.add_option(
        '-t', '--config-check',
        action = 'store_true',
        default = False,
        dest = 'config_check',
        help = 'Test hubot\'s config to make sure it won\'t fail at startup'
    )

    parser.add_option(
        '-v', '--version',
        action = 'store_true',
        default = False,
        help = 'Displays the version of hubot installed'
    )


    (options, args) = parser.parse_args()

    #if sys.platform is not 'win32':
    #    signal.signal(signal.SIGTERM, sys.exit())

    if options.alias == '':
        options.alias = '/'

    if hasattr(options, 'create') and options.create:
        print >> sys.stderr, """'hubot --create' is deprecated. 
                             Use the yeoman generator instead:"""
        print >> sys.stderr, "    npm install -g yo generator-hubot"
        print >> sys.stderr, "    mkdir -p %s" % options.path
        print >> sys.stderr, "    yo hubot"
        print >> sys.stderr, """See 
            https://github.com/github/hubot/blob/master/docs/README.md
            for more details on getting started."""
        sys.exit(1)
    else:
        dirname = os.path.dirname(os.path.abspath(sys.argv[0]))
        #adapter_path = os.path.join(dirname, '..', 'src', 'pybot', 'adapters')
        adapter_namespace = 'pybot.adapters'

        robot = Robot(adapter_namespace,
                        options.adapter,
                        options.enabledHttpd,
                        options.name)

        if options.version:
            print robot.version
            sys.exit()

        robot.alias = options.alias

    def load_scripts():
        scripts_path = os.path.abspath(os.path.join('.', 'scripts'))
        robot.load(scripts_path)

        scripts_path = os.path.abspath(os.path.join('.', 'src', 'scripts'))
        robot.load(scripts_path)

        hubot_scripts = os.path.abspath(os.path.join('.', 'hubot-scripts.json'))
        if os.path.exists(hubot_scripts):
            fs = open(hubot_script, 'r')
            data = fs.read()
            if data.length > 0:
                ## TODO: Checking to need a exception processing
                scripts = json.load(data)
                #scripts_path = os.path.abspath(os.path.join('node_modules',
                #                                            'hubot-scripts',
                #                                            'src', 'scripts'))
                script_path = os.path.abspath(os.path.join('src',
                                                           'pybot', 'scripts'))
                robot.load_hubot_scripts(scripts_path, scripts)

        external_scripts = os.path.abspath(
                            os.path.join('.','external-scripts.json'))
        if os.path.exists(external_scripts):
            fs = open(external_scripts, 'r')
            ## TODO: Fix to ansyncroniously reading above code
            data = fs.read()
            if data.length > 0:
                ## TODO: Checking to need a exception processing
                scripts = json.load(data)
                robot.load_external_scripts(scripts)

        for path in options.scripts:
            if path[0] == '/':
                scripts_path = path
            else:
                scripts_path = os.path.abspath(os.path.join('.', path))
            robot.load(scripts_path)

    if options.config_check:
        load_scripts()
        print 'OK'
        sys.exit()

    robot.adapter.on('connected', load_scripts)

    robot.run()


if __name__ == '__main__':
    main()

